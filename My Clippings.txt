JavaScript高级程序设计(第3版) (图灵程序设计丛书) (泽卡斯（Zakas. Nicholas C.）)
- 您在位置 #12692-12693的标注 | 添加于 2015年8月28日星期五 下午10:40:56

通过JavaScript指定事件处理程序的传统方式，就是将一个函数赋值给一个事件处理程序属性。
==========
﻿JavaScript高级程序设计(第3版) (图灵程序设计丛书) (泽卡斯（Zakas. Nicholas C.）)
- 您在位置 #12695-12698的标注 | 添加于 2015年8月28日星期五 下午10:41:17

每个元素（包括window和document）都有自己的事件处理程序属性，这些属性通常全部小写，例如onclick。
==========
﻿JavaScript高级程序设计(第3版) (图灵程序设计丛书) (泽卡斯（Zakas. Nicholas C.）)
- 您在位置 #12704-12705的标注 | 添加于 2015年8月28日星期五 下午10:41:49

使用DOM0级方法指定的事件处理程序被认为是元素的方法。因此，这时候的事件处理程序是在元素的作用域中运行；换句话说，程序中的this引用当前元素。
==========
﻿JavaScript高级程序设计(第3版) (图灵程序设计丛书) (泽卡斯（Zakas. Nicholas C.）)
- 您在位置 #12720-12726的标注 | 添加于 2015年8月28日星期五 下午10:42:41

“DOM2级事件”定义了两个方法，用于处理指定和删除事件处理程序的操作：addEventListener()和removeEventListener()。所有DOM节点中都包含这两个方法，并且它们都接受3个参数：要处理的事件名、作为事件处理程序的函数和一个布尔值。最后这个布尔值参数如果是true，表示在捕获阶段调用事件处理程序；如果是false，表示在冒泡阶段调用事件处理程序。
==========
﻿JavaScript高级程序设计(第3版) (图灵程序设计丛书) (泽卡斯（Zakas. Nicholas C.）)
- 您在位置 #12731-12733的标注 | 添加于 2015年8月28日星期五 下午10:45:00

与DOM0级方法一样，这里添加的事件处理程序也是在其依附的元素的作用域中运行。使用DOM2级方法添加事件处理程序的主要好处是可以添加多个事件处理程序。
==========
﻿JavaScript高级程序设计(第3版) (图灵程序设计丛书) (泽卡斯（Zakas. Nicholas C.）)
- 您在位置 #12739-12742的标注 | 添加于 2015年8月28日星期五 下午10:45:29

通过addEventListener()添加的事件处理程序只能使用removeEventListener()来移除；移除时传入的参数与添加处理程序时使用的参数相同。这也意味着通过addEventListener()添加的匿名函数将无法移除，
==========
﻿JavaScript高级程序设计(第3版) (图灵程序设计丛书) (泽卡斯（Zakas. Nicholas C.）)
- 您在位置 #12954-12955的标注 | 添加于 2015年8月29日星期六 上午6:30:29

要阻止特定事件的默认行为，可以使用preventDefault()方法。例如，链接的默认行为就是在被单击时会导航到其
==========
﻿JavaScript高级程序设计(第3版) (图灵程序设计丛书) (泽卡斯（Zakas. Nicholas C.）)
- 您在位置 #12954-12956的标注 | 添加于 2015年8月29日星期六 上午6:30:38

要阻止特定事件的默认行为，可以使用preventDefault()方法。例如，链接的默认行为就是在被单击时会导航到其href特性指定的URL。
==========
﻿JavaScript高级程序设计(第3版) (图灵程序设计丛书) (泽卡斯（Zakas. Nicholas C.）)
- 您在位置 #12954-12955的标注 | 添加于 2015年8月29日星期六 上午6:30:48

要阻止特定事件的默认行为，可以使用preventDefault()方法。
==========
﻿JavaScript高级程序设计(第3版) (图灵程序设计丛书) (泽卡斯（Zakas. Nicholas C.）)
- 您在位置 #12960-12963的标注 | 添加于 2015年8月29日星期六 上午6:30:56

只有cancelable属性设置为true的事件，才可以使用preventDefault()来取消其默认行为。
==========
﻿JavaScript高级程序设计(第3版) (图灵程序设计丛书) (泽卡斯（Zakas. Nicholas C.）)
- 您在位置 #12964-12965的标注 | 添加于 2015年8月29日星期六 上午6:31:02

stopPropagation()方法用于立即停止事件在DOM层次中的传播，即取消进一步的事件捕获或冒泡。
==========
﻿JavaScript高级程序设计(第3版) (图灵程序设计丛书) (泽卡斯（Zakas. Nicholas C.）)
- 您在位置 #13494-13498的标注 | 添加于 2015年8月29日星期六 下午10:49:30

IE8及更早版本不支持事件对象上的页面坐标，不过使用客户区坐标和滚动信息可以计算出来。这时候需要用到document.body（混杂模式）或document.documentElement（标准模式）中的scrollLeft和scrollTop属性。
==========
JavaScript高级程序设计(第3版) (图灵程序设计丛书) (泽卡斯（Zakas. Nicholas C.）)
- 您在位置 #8986-8990的标注 | 添加于 2015年8月31日星期一 下午1:13:36

第一个就是documentElement属性，该属性始终指向HTML页面中的<html>元素。另一个就是通过childNodes列表访问文档元素，但通过documentElement属性则能更快捷、更直接地访问该元素。
==========
JavaScript高级程序设计(第3版) (图灵程序设计丛书) (泽卡斯（Zakas. Nicholas C.）)
- 您在位置 #9010-9014的标注 | 添加于 2015年8月31日星期一 下午1:14:25

Document另一个可能的子节点是DocumentType。通常将<!DOCTYPE>标签看成一个与文档其他部分不同的实体，可以通过doctype属性（在浏览器中是document.doctype）来访问它的信息。
==========
JavaScript权威指南（原书第6版） ((美)David Flanagan)
- 您在位置 #7117 的书签 | 添加于 2015年9月14日星期一 下午2:47:19


==========
JavaScript权威指南（原书第6版） ((美)David Flanagan)
- 您在位置 #7310-7313的标注 | 添加于 2015年9月14日星期一 下午3:00:24

在Web浏览器中，“书签”就是一个保存起来的URL。如果书签是javascript：URL，那么保存的就是一小段脚本，叫做bookmarklet。bookmarklet是一个小型程序，很容易就可以从浏览器的菜单或工具栏里启动。bookmarklet里的代码执行起来就像页面上的脚本一样，可以查询和设置文档的内容、呈现和行为。只要书签不返回值，它就可以操作当前显示的任何文档，而不把文档替换成新的内容。
==========
JavaScript权威指南（原书第6版） ((美)David Flanagan)
- 您在位置 #7378-7386的标注 | 添加于 2015年9月14日星期一 下午3:06:20

脚本的执行只在默认情况下是同步和阻塞的。<script>标签可以有defer和async属性，这（在支持它们的浏览器里）可以改变脚本的执行方式。这些都是布尔属性，没有值；只需要出现在<script>标签里即可。HTML5说这些属性只在和src属性联合使用时才有效，但有些浏览器还支持延迟的内联脚本： <script defer src="deferred.js"></script> <script async src="async.js"></script> defer和async属性都像在告诉浏览器链接进来的脚本不会使用document.write（），也不会生成文档内容，因此浏览器可以在下载脚本时继续解析和渲染文档。defer属性使得浏览器延迟脚本的执行，直到文档的载入和解析完成，并可以操作。async属性使得浏览器可以尽快地执行脚本，而不用在下载脚本时阻塞文档解析。如果<script>标签同时有两个属性，同时支持两者的浏览器会遵从async属性并忽略defer属性。
==========
JavaScript权威指南（原书第6版） ((美)David Flanagan)
- 您在位置 #7462 的书签 | 添加于 2015年9月14日星期一 下午3:23:00


==========
JavaScript权威指南（原书第6版） ((美)David Flanagan)
- 您在位置 #7851 的书签 | 添加于 2015年9月15日星期二 上午10:26:14


==========
JavaScript权威指南（原书第6版） ((美)David Flanagan)
- 您在位置 #7889 的书签 | 添加于 2015年9月15日星期二 上午10:28:38


==========
JavaScript权威指南（原书第6版） ((美)David Flanagan)
- 您在位置 #9543-9545的标注 | 添加于 2015年9月16日星期三 下午3:35:16

width和height只指定了元素内容区域的尺寸，它不包含元素的内边距或边框（或外边距）所需的任何额外空间。为了确定有边框元素在屏幕上的全尺寸，必须把元素的宽度加上左右两边的内边距和左右两个边框宽度，把元素的高度加上上下两边的内边距和上下两个边框宽度。
==========
JavaScript权威指南（原书第6版） ((美)David Flanagan)
- 您在位置 #9546-9548的标注 | 添加于 2015年9月16日星期三 下午3:35:23

left和top属性指定了从容器边框内侧到定位元素边框外侧的距离。这些属性不是从容器内容区域的左上角开始度量的，而是从容器内边距的左上角开始的。同样，right和bottom属性是从容器内边距的右下角开始度量的。
==========
JavaScript权威指南（原书第6版） ((美)David Flanagan)
- 您在位置 #9575-9576的标注 | 添加于 2015年9月16日星期三 下午3:51:16

visibility和display属性对绝对和固定定位的元素的影响是等价的，因为这些元素都不是文档布局的一部分。
==========
JavaScript权威指南（原书第6版） ((美)David Flanagan)
- 您在位置 #9571-9574的标注 | 添加于 2015年9月16日星期三 下午3:51:42

visibility和display属性之间的差别可以从它们对使用静态或相当定位的元素的影响中看到。对于一个常规布局流中的元素，设置visibility属性为hidden使得元素不可见，但是在文档布局中仍保留了它的空间。类似的元素可以重复隐藏和显示而不改变文档布局。但是，如果元素的display属性设置为none，在文档布局中不再给它分配空间，它各边的元素会合拢，就当它从来不存在。
==========
JavaScript权威指南（原书第6版） ((美)David Flanagan)
- 您在位置 #9635-9664的标注 | 添加于 2015年9月16日星期三 下午3:57:16

<!DOCTYPE html> <head> <style type="text/css"> /** * This is a CSS stylesheet that defines three style rules that we use * in the body of the document to create a "window" visual effect. * The rules use positioning properties to set the overall size of the window * and the position of its components. Changing the size of the window * requires careful changes to positioning properties in all three rules. **/ div.window { /* 指定窗口的尺寸和边框 */ position: absolute; /* position在其他地方指定 */ width: 300px; height: 200px; /* 窗口尺寸，不含边框 */ border: 3px outset gray; /* 注意 3D "outset" 边框效果 */ } div.titlebar { /* 指定标题栏的定位、尺寸和样式 */ position: absolute; /* 它是定位元素 */ top: 0px; height: 18px; /* 标题栏18px + 内边距和边框 */ width: 290px; /* 290 + 5px 左、右内边距 = 300 */ background-color: #aaa; /* 标题栏颜色 */ border-bottom: groove gray 2px; /* 标题栏只有底部边框 */ padding: 3px 5px 2px 5px; /* 顺时针值: top、right、bottom、left */ font: bold 11pt sans-serif; /* 标题栏字体 */ } div.content { /* 指定窗口内容的尺寸、定位和滚动 */ position: absolute; /* 它是定位元素 */ top: 25px; /* 18px标题+2px边框+3px+2px内边距 */ height: 165px; /* 200px总共－25px标题栏－10px内边距 */ width: 290px; /* 300px宽度－10px内边距 */ padding: 5px; /* 4条边上都有空间 */ overflow: auto; /* 如果需要显示滚动条 */ background-color: #fff; /* 默认白色背景 */ } div.translucent { /* 此类让窗口部分透明 */ opacity: .75; /* 透明度标准样式 */ filter: alpha(opacity=75); /* IE的透明度 */ } </style> </head> <body> <!-- 定义一个窗口："window" div有一个标题栏和 --> <!-- 其内是一个内容div。注意，如何设置定位 --> <!-- 一个扩充了样式表的style属性 --> <div class="window"> <div class="titlebar">Test Window</div> <div class="content"> 1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>0<br><!-- 若干行 --> 1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>0<br><!-展示滚动--> </div> </div> <!-- 定义另一个窗口：用不同的定位、颜色和字体重量 --> <div class="window"> <div class="titlebar">Another Window</div> <div class="content translucent" > This is another window. Its <tt>z-index</tt> puts it on top of the other one. CSS styles make its content area translucent, in browsers that support that. </div> </div>
==========
